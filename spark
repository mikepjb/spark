#!/bin/sh
# vim: fdm=marker

# TODO write your own package.json, inject git email/user as author, set MIT license?
# TODO a bit more verbosity to describe what's going on (spark needs better UX)
# TODO check gatsby-cli is available..
# TODO check gatsby-cli version too..
# TODO create tailwind-sandbox? naked tailwind only no framework etc.. with live-server etc

# Functions {{{

red_code='\033[1;31m'
green_code='\033[1;32m'
yellow_code='\033[1;33m'
blue_code='\033[1;34m'
magenta_code='\033[1;35m'
reset_code='\033[0m'

function red { printf -- "$red_code$*$reset_code"; }
function yellow { printf -- "$yellow_code$*$reset_code"; }
function green { printf -- "$green_code$*$reset_code"; }
function blue { printf -- "$blue_code$*$reset_code"; }
function magenta { printf -- "$magenta_code$*$reset_code"; }

function write_and_save { # write_and_save ~/.bashrc "$bashrc"
  name=$(basename "$1")
  echo "$(blue '  ->') checking if $1 matches..."
  if [ -f "$1" ]; then
    if [ "$(cat $1)" != "$2" ]; then
      echo "$(blue '  ->') $1 does not match, backing up to ~/.config/backup/$name"
      mkdir -p ~/.config/backup
      mv "$1" ~/.config/backup/$name
      echo "$(blue '  ->') writing new $1"
      echo "$2" > "$1"
    else
      echo "$(blue '  ->') "$1" matches generated version, no action required"
    fi
  else
    echo "$(blue '  ->') "$1" does not exist, writing new version"
    mkdir -p $(dirname "$1")
    echo "$2" > "$1"
  fi
}

# }}}
# Start {{{
echo "$(green '==>') Spark -\`*Â´-"
# }}}
# Read Arguments & Environment {{{

platform=$(uname)
project_name="project"
project_directory="$PWD/$project_name"

if [ ${#@} -ne 0 ]; then
  case $* in
    *--help*) printf -- '...help...\n'; exit 0;;
    *-h*) printf -- '...help...\n'; exit 0;;
    *new*) project_name="$2"; project_directory="$PWD/$project_name";;
    *) printf -- 'nothing chosen, exiting...\n'; exit 0;;
  esac
fi

printf -- "$(blue '  ->') project name: $project_name\n"
printf -- "$(blue '  ->') project directory: $project_directory\n"

# }}}
# Initial Setup {{{

if [ -d $1 ]; then
  print -- "$(red $project_name ' directory already exists')"
fi

mkdir "$project_directory" && cd "$project_directory"
mkdir -p static/img # init folder where Netlify CMS will store media. 
git init

# }}}
# Templates {{{

index_page=$(cat <<"EOF"
import React from "react"
import { graphql } from "gatsby";

export const HomePageTemplate = ({ home }) => {
  return (
    <h1 class="m-5 text-center">{home.message}</h1>
  )
}

class HomePage extends React.Component {
  render() {
    const { data } = this.props;
    const { frontmatter: home } = data.allMarkdownRemark.edges[0].node;
    return (
      <HomePageTemplate home={home} />
    )
  }
}

export default HomePage

export const query = graphql`
  query HomePageQuery {
    allMarkdownRemark(filter: {frontmatter: {type: {eq: "index"}}}) {
      edges {
        node {
          id
          frontmatter {
            title
            path
            date
            message
          }
        }
      }
    }
  }
`
EOF
)
write_and_save "$project_directory/src/pages/index.js" "$index_page"

index_info=$(cat <<"EOF"
---
type: index
path: "/"
title: "Index Page Title"
message: "Hello from index frontmatter!"
---
EOF
)
write_and_save "$project_directory/src/content/index.md" "$index_info"

post_page=$(cat <<"EOF"
import React from "react"
import { graphql } from "gatsby"
export default function Template({
  data, // this prop will be injected by the GraphQL query below.
}) {
  const { markdownRemark } = data // data.markdownRemark holds your post data
  const { frontmatter, html } = markdownRemark
  return (
    <div className="blog-post-container">
      <div className="blog-post">
        <h1>{frontmatter.title}</h1>
        <h2>{frontmatter.date}</h2>
        <div
          className="blog-post-content"
          dangerouslySetInnerHTML={{ __html: html }}
        />
      </div>
    </div>
  )
}
export const pageQuery = graphql`
  query($path: String!) {
    markdownRemark(frontmatter: { path: { eq: $path } }) {
      html
      frontmatter {
        date(formatString: "MMMM DD, YYYY")
        path
        title
      }
    }
  }
`
EOF
)
write_and_save "$project_directory/src/templates/post.js" "$post_page"

demo_post=$(cat <<"EOF"
---
path: "/demo-post"
date: "2019-05-04"
title: "A demo post."
---
EOF
)
write_and_save "$project_directory/src/content/posts/demo-post.md" "$demo_post"

gitignore=$(cat <<"EOF"
node_modules/
EOF
)
write_and_save "$project_directory/.gitignore" "$gitignore"

package_json=$(cat <<EOF
{
  "name": "$project_name",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "gatsby develop",
    "build": "gatsby build",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "gatsby-plugin-purgecss": "^4.0.1",
    "gatsby-plugin-netlify": "^2.1.30",
    "gatsby-plugin-netlify-cms": "^4.1.33",
    "netlify-cms-app": "2.10.1",
    "gatsby-transformer-remark": "^2.6.45",
    "gatsby-plugin-postcss": "^2.1.18",
    "gatsby-source-filesystem": "^2.1.43",
    "tailwindcss": "^1.1.4",
    "autoprefixer": "^9.7.3",
    "gatsby": "^2.18.17",
    "postcss": "^7.0.25",
    "react": "^16.12.0",
    "react-dom": "^16.12.0"
  }
}
EOF
)
write_and_save "$project_directory/package.json" "$package_json"

gatsby_config=$(cat <<"EOF"
module.exports = {
  plugins: [
    {
      // keep as first gatsby-source-filesystem plugin for gatsby image support
      resolve: 'gatsby-source-filesystem',
      options: {
        path: `${__dirname}/static/img`,
        name: 'uploads',
      },
    },
    {
      resolve: 'gatsby-source-filesystem',
      options: {
        path: `${__dirname}/src/content`,
        name: 'pages',
      },
    },
    {
      resolve: `gatsby-plugin-postcss`,
      options: {
        postCssPlugins: [
          require("tailwindcss"),
          require("autoprefixer"),
        ]
      },
    },
    {
      resolve: `gatsby-plugin-purgecss`,
      options: {
        printRejected: false,
        develop: false,
        tailwind: true,
      },
    },
    {
      resolve: "gatsby-transformer-remark",
      options: {
        plugins: [],
      },
    },
    {
      resolve: "gatsby-plugin-netlify-cms",
      options: {
        modulePath: `${__dirname}/src/cms/cms.js`,
      },
    },
    "gatsby-plugin-netlify", // make sure to keep it last in the array
  ]
}
EOF
)
write_and_save "$project_directory/gatsby-config.js" "$gatsby_config"

gatsby_node=$(cat <<"EOF"
const path = require(`path`)
exports.createPages = async ({ actions, graphql, reporter }) => {
  const { createPage } = actions
  const postTemplate = path.resolve(`src/templates/post.js`)
  const result = await graphql(`
    {
      allMarkdownRemark(
        filter: {frontmatter: {type: {eq: null}}}
        sort: { order: DESC, fields: [frontmatter___date] }
        limit: 1000
      ) {
        edges {
          node {
            frontmatter {
              path
            }
          }
        }
      }
    }
  `)
  // Handle errors
  if (result.errors) {
    reporter.panicOnBuild(`Error while running GraphQL query.`)
    return
  }
  result.data.allMarkdownRemark.edges.forEach(({ node }) => {
    createPage({
      path: node.frontmatter.path,
      component: postTemplate,
      context: {}, // additional data can be passed via context
    })
  })
}
EOF
)
write_and_save "$project_directory/gatsby-node.js" "$gatsby_node"

gatsby_browser=$(cat <<"EOF"
import "./src/style.css"
EOF
)
write_and_save "$project_directory/gatsby-browser.js" "$gatsby_browser"

tailwind_config=$(cat <<"EOF"
module.exports = {
  theme: {
    extend: {}
  },
  variants: {},
  plugins: []
}
EOF
)
write_and_save "$project_directory/tailwind.config.js" "$tailwind_config"

style_css=$(cat <<"EOF"
@tailwind base;
@tailwind components;
@tailwind utilities;
EOF
)
write_and_save "$project_directory/src/style.css" "$style_css"

netlify_config=$(cat <<"EOF"
[build]
  publish = "public"
  command = "npm run build"
EOF
)
write_and_save "$project_directory/netlify.toml" "$netlify_config"

cms_imports=$(cat <<"EOF"
import CMS from "netlify-cms-app"
import HomePagePreview from "./HomePagePreview"
CMS.registerPreviewTemplate("home", HomePagePreview)
EOF
)
write_and_save "$project_directory/src/cms/cms.js" "$cms_imports"

home_page_preview=$(cat <<"EOF"
import React from "react";
import PropTypes from "prop-types";

import { HomePageTemplate } from "../pages/index";

const HomePagePreview = ({ entry }) => {
  const home = entry.getIn(["data"]).toJS();
  return <HomePageTemplate home={home} />;
};

HomePagePreview.propTypes = {
  entry: PropTypes.shape({
    getIn: PropTypes.func,
  }),
};

export default HomePagePreview;
EOF
)
write_and_save "$project_directory/src/cms/HomePagePreview.js" "$home_page_preview"

netlify_cms_config=$(cat <<EOF
backend:
  name: test-repo
  # defaults to test-repo, used to testing netlify-cms configuration locally.
  # name: git-gateway
  # branch: master

media_folder: static/img
public_folder: /img

display_url: https://$project_name-demo.netlify.com/

collections:
  - name: "posts"
    label: "Posts"
    description: "Blog posts."
    folder: "src/content/posts"
    create: true
    fields:
      - { label: "Title", name: "title", widget: "string" }
      - { label: "Date", name: "date", widget: "datetime" }
      - { label: "Text", name: "text", required: true, widget: text }
  - name: "pages"
    label: "Pages"
    files:
      - file: "src/content/index.md"
        name: "home"
        label: "Home"
        fields:
          - { label: "TemplateKey", name: "templateKey", widget: "hidden", default: "home-page" }
          - {
              label: "Hero Image",
              name: "heroImage",
              widget: "object",
              fields:
                [
                  { label: "Image", name: "image", widget: "image" },
                  { label: "Image Description", name: "imageAlt", widget: "string" },
                ],
            }
          - { label: "Title", name: "title", widget: "string" }
EOF
)
write_and_save "$project_directory/static/admin/config.yml" "$netlify_cms_config"


# }}}
# Final steps {{{
npm install # source dependencies
git add --all && git commit -m "Created $project_name" # commit completed setup
# }}}
printf -- "$(green '   ->') setup complete, run \`gatsby develop\` to get started\n"
